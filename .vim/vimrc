" leaders {{{
let mapleader=","
let maplocalleader="\\"
" }}}
" Plugins {{{
" Vim-plug {{{
let vimplug_exists=expand('~/.vim/autoload/plug.vim')
if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!\curl -fLo " . vimplug_exists . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

call plug#begin(expand('~/.vim/plugged'))
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'Shougo/deoplete-lsp'
    Plug 'wellle/tmux-complete.vim'
    Plug 'Shougo/echodoc.vim'
    Plug 'Shougo/neosnippet.vim'
    Plug 'Shougo/neosnippet-snippets'
    Plug 'neovim/nvim-lspconfig'
endif
Plug 'alec-gibson/nvim-tetris'
Plug 'airblade/vim-gitgutter'
Plug 'cyberkov/openhab-vim'
Plug 'dhruvasagar/vim-zoom'
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'jreybert/vimagit'
Plug 'lepture/vim-jinja', {'for': 'jinja'}
Plug 'machakann/vim-highlightedyank'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'simeji/winresizer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'jreybert/vimagit'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'cespare/vim-toml'
Plug 'Raimondi/delimitMate'

call plug#end()


filetype plugin indent on
" }}}
" Airline Plugin {{{
let g:airline_theme='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#buffers_label = ''
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_detect_modified=1

call airline#parts#define('colnr', {
        \ 'raw': ' %{g:airline_symbols.colnr}:%v ',
        \ 'accent': 'bold'})
" }}}
" Deoplete {{{
if has("nvim")
    let g:deoplete#enable_at_startup = 1
    let g:echodoc#enable_at_startup = 1
    let g:echodoc#type = 'signature'
    call deoplete#custom#option({
                \ 'auto_complete_delay': 200,
                \ 'smart_case': v:true,
                \ })
    call deoplete#custom#source('_',
                \ 'max_abbr_width', 60)

    call deoplete#custom#var('around', {
                \   'range_above': 30,
                \   'range_below': 15,
                \   'mark_above': '[↑]',
                \   'mark_below': '[↓]',
                \   'mark_changes': '[*]',
                \})
endif
" }}}
" Fuzzy Finder Plugin {{{
nnoremap <leader>p :FZF<cr>
" Search Files
nnoremap <leader>sf :FZF<cr>
" Search Files from home
nnoremap <leader>sh :FZF ~ <cr>
" Search Git
nnoremap <leader>sg :GFiles<cr>
" Search Lines
nnoremap <leader>sl :Lines<cr>
" }}}
" Git Gutter {{{
set updatetime=100
" }}}
" Go Plugins (vim-go) {{{
let g:go_fmt_autosave = 0
let g:go_fmt_command = ""
let g:go_code_completion_enabled = 0
let g:go_mod_fmt_autosave = 0
" }}}
" Highlighted yank {{{
let g:highlightedyank_highlight_duration = 2000
" }}}
" Magit {{{
let g:magit_auto_close = 1
let g:magit_scrolloff = 0
" }}}
" Markdown Plugins {{{
let g:vim_markdown_folding_disabled = 1
let g:tex_conceal = ""
let g:vim_markdown_math = 1
let g:vim_markdown_json_frontmatter = 1

let g:mkdp_browser = 'brave-browser'
let g:mkdp_auto_close = 0
" }}}
" Win Resize/Vim Zoom {{{
let g:winresizer_start_key = '<c-a>'
nmap <c-w>z <Plug>(zoom-toggle)
" }}}
" Rust.vim {{{
let g:rustfmt_autosave = 0
" }}}
" Neosnippet {{{
if has('nvim')
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    imap <expr><cr> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<cr>"
    smap <expr><cr> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<cr>"
endif
" }}}
" }}}
" Basic settings and status line {{{
set autoindent
set backspace=2
set clipboard=unnamed
set cmdheight=2
set completeopt+=menuone,noinsert,noselect
set completeopt-=preview
set conceallevel=2
set encoding=utf-8
set expandtab
set fileencoding=utf-8
set fileencodings=utf-8
set fileformat=unix
set formatoptions-=t
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set noruler
set noswapfile
set nowrap
set number
set scrolloff=10
set shiftwidth=4
set showcmd
set signcolumn=yes
set smartcase
set smartindent
set softtabstop=4
set t_Co=256
set tabstop=4
set textwidth=0
if has('nvim')
    set inccommand=split
endif

syntax on
colorscheme southernlights

hi Pmenu ctermfg=40 ctermbg=8
hi PmenuSel ctermbg=52
hi PmenuSbar ctermbg=4

hi EndingWhiteSpace ctermbg=52
match EndingWhiteSpace /\s\+\%#\@<!$/
" }}}
" Initialize nvim-lsp {{{
if has('nvim')
lua <<EOF
local lspconfig = require'lspconfig';
local home = os.getenv("HOME");
lspconfig.bashls.setup{
  cmd = { home.."/.local/node_modules/bash-language-server/bin/main.js", "start" }
}
lspconfig.ccls.setup{}
lspconfig.dockerls.setup{
  cmd = { home.."/.local/node_modules/dockerfile-language-server-nodejs/bin/docker-langserver", "--stdio" }
}
lspconfig.gopls.setup{}
lspconfig.rust_analyzer.setup{
    settings = {
        ["rust-analyzer"] = {
          diagnostics = {
              enable = true,
              disabled = {"unresolved-proc-macro"},
              enableExperimental = true,
          }
        }
    }
}
lspconfig.pyls.setup{}
lspconfig.yamlls.setup{
  cmd = { home.."/.local/node_modules/yaml-language-server/bin/yaml-language-server", "--stdio" },
  settings = {
    yaml = {
      schemas = {
        ["https://json.schemastore.org/github-workflow"] = "mean_bean*.yml"
      }
    }
  }
}
EOF

    autocmd TermOpen * set bufhidden=wipe
    autocmd FileType c,cpp,rust,python,go autocmd BufWritePre <buffer> lua vim.lsp.buf.formatting_sync(nil, 1000)
    autocmd BufWritePre *.go lua vim.lsp.buf.code_action({ source = { organizeImports = true } })
    set omnifunc=v:lua.vim.lsp.omnifunc
endif
" }}}
" maps {{{
let g:bash_ctrl_j='off'
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/usr/bin/python3'
let g:python3_host_skip_check = 1

let g:netrw_dirhistmax = 0

" open and source the vimrc file ev=edit vimrc sv=source vimrc
nnoremap <leader>ev :e ~/.dotfiles/.vim/vimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>q :bp<bar>bd #<cr>
nnoremap <c-l> <c-w>l
nnoremap <c-r> <c-w>r

nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap j gj
nnoremap k gk
nnoremap <down> 3jzz
nnoremap <up> 3kzz
nnoremap <s-h> :bp<cr>
nnoremap <s-l> :bn<cr>

nnoremap <c-g> 1<c-g>

nnoremap <c-w><bar> <c-w>v
nnoremap <c-w>- <c-w>s

inoremap jk <esc>

" Use C-u/d to go up/down the popup menu of deoplete
inoremap <expr> <C-d> pumvisible() ? "\<C-n>" : "\<C-d>"
inoremap <expr> <C-u> pumvisible() ? "\<C-p>" : "\<C-u>"
cnoremap <expr> <C-d> pumvisible() ? "\<C-n>" : "\<C-d>"
cnoremap <expr> <C-u> pumvisible() ? "\<C-p>" : "\<C-u>"

" Disable ctrl + Left/Right which deletes stuff
nnoremap <esc>[1;5D <nop>
nnoremap <esc>[1;5C <nop>
inoremap <esc>[1;5D <nop>
inoremap <esc>[1;5C <nop>
nnoremap <lt> <nop>
nnoremap > <nop>
nnoremap <c-r> <c-r>

nnoremap <silent> <F2> <cmd>lua vim.lsp.buf.rename()<CR>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> <leader>r <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <leader>f <cmd>lua vim.lsp.buf.formatting()<CR>
nnoremap <silent> <leader>n <cmd>lua vim.lsp.buf.code_action()<CR>
nnoremap <silent> <leader>e <cmd>lua vim.lsp.buf.signature_help()<CR>

" Clean up whitespaces at end of lines
nnoremap <silent> <leader>ws :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

" Delete current selection to the black hole registry before pasting,
" keeping the currently pasted text instead of overwriting it.
vnoremap p "_dP

" key-mappings for comment line in normal mode tpope/vim-commentary
noremap  <silent> gc :Commentary<cr>

" save file with sudo permissions
cmap w!! w !sudo tee > /dev/null %

nnoremap dgh :diffget //2 <CR> ]c
nnoremap dgl :diffget //3 <CR> ]c

nmap ysss <Plug>Yssurround <s>I* <esc>f*xx

" space to toggle folds.
nnoremap <space> za
vnoremap <space> za
autocmd FileType yaml setlocal indentkeys-=<:> ts=4 sts=4 sw=4 expandtab
" }}}
" Vimscript file settings {{{
augroup FT_vim
    au!
    autocmd filetype vim let b:mycomment = "\""
    autocmd filetype vim setlocal foldmethod=marker
augroup end
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $HOME . '/.dotfiles/.vim/vimrc' source $MYVIMRC
augroup END
" }}}
" Go file settings {{{
augroup FT_go
    au!
    autocmd FileType go nnoremap <leader>b :GoBuild <cr>
    autocmd FileType go nnoremap <leader>i :GoInstall <cr>
    autocmd FileType go nnoremap <leader>t :GoTest <cr>
    autocmd FileType go nnoremap <leader>c :GoCallers <cr>
augroup END
" }}}
" Rust file settings {{{
augroup FT_rust
    au!
    autocmd FileType rust nnoremap <leader>b :Cbuild <cr> <bar> <s-g>
    autocmd FileType rust nnoremap <leader>i :Cinstall <cr>
    autocmd FileType rust nnoremap <leader>t :Ctest -- --nocapture <cr> <bar> <s-g>
    autocmd FileType rust nnoremap <leader>bt :! RUST_BACKTRACE=1 cargo test <cr> <bar> <s-g>
augroup END
" }}}
" Json file settings {{{
augroup FT_python
    au!
    autocmd FileType json setlocal equalprg=python3\ -m\ json.tool
augroup END
"" }}}
