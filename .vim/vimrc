" leaders {{{
let mapleader=","
let maplocalleader="\\"
" }}}
" Plugins {{{
" Vim-plug {{{
let vimplug_exists=expand('~/.vim/autoload/plug.vim')
if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!\curl -fLo " . vimplug_exists . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

call plug#begin(expand('~/.vim/plugged'))
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'deoplete-plugins/deoplete-jedi', {'for': 'python'}
    Plug 'deoplete-plugins/deoplete-go', {'do': 'make'}
    Plug 'sebastianmarkow/deoplete-rust', {'for': 'rust'}
    Plug 'wellle/tmux-complete.vim'
    Plug 'Shougo/echodoc.vim'
    Plug 'Shougo/neosnippet.vim'
    Plug 'Shougo/neosnippet-snippets'
    Plug 'autozimu/LanguageClient-neovim', {
        \ 'branch': 'next',
        \ 'do': 'bash install.sh',
        \ }
end

Plug 'airblade/vim-gitgutter'
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'dhruvasagar/vim-zoom'
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'fatih/vim-go', {'for': 'go', 'do': ':GoInstallBinaries'}
Plug 'iamcco/markdown-preview.nvim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'lepture/vim-jinja', {'for': 'jinja'}
Plug 'machakann/vim-highlightedyank'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'simeji/winresizer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Raimondi/delimitMate'

call plug#end()

filetype plugin indent on
" }}}
" Airline Plugin {{{
let g:airline_theme='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#buffers_label = ''
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_detect_modified=1
" }}}
" Deoplete {{{
if has("nvim")
    let g:deoplete#enable_at_startup = 1
    let g:echodoc#enable_at_startup = 1
    let g:echodoc#type = 'signature'
    call deoplete#custom#option({
                \ 'auto_complete_delay': 200,
                \ 'smart_case': v:true,
                \ })
    call deoplete#custom#option({
                \ 'ignore_sources': {'rust': ['LanguageClient']},
                \ })
    call deoplete#custom#source('_',
                \ 'max_abbr_width', 60)

    call deoplete#custom#var('around', {
                \   'range_above': 30,
                \   'range_below': 15,
                \   'mark_above': '[↑]',
                \   'mark_below': '[↓]',
                \   'mark_changes': '[*]',
                \})
" GO
    let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
end
" }}}
" Fuzzy Finder Plugin {{{
nnoremap <leader>p :FZF<cr>
" Search Files
nnoremap <leader>sf :FZF<cr>
" Search Files from home
nnoremap <leader>sh :FZF ~ <cr>
" Search Git
nnoremap <leader>sg :GFiles<cr>
" Search Lines
nnoremap <leader>sl :Lines<cr>
" }}}
" Git Gutter {{{
set updatetime=100
" }}}
" Go Plugins (vim-go) {{{
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
" }}}
" Highlighted yank {{{
let g:highlightedyank_highlight_duration = 2000
" }}}
" Language Client {{{
let g:LanguageClient_serverCommands = {
    \ 'rust': [$HOME . '/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/pyls'],
    \ }
" }}}
" Markdown Plugins {{{
let g:vim_markdown_folding_disabled = 1
let g:tex_conceal = ""
let g:vim_markdown_math = 1
let g:vim_markdown_json_frontmatter = 1

let g:mkdp_browser = 'chromium'
let g:mkdp_auto_close = 0
" }}}
" Win Resize/Vim Zoom {{{
let g:winresizer_start_key = '<c-a>'
nmap <c-w>z <Plug>(zoom-toggle)
" }}}
" Rust.vim {{{
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1
" }}}
" Neosnippet {{{
if has('nvim')
    imap <expr><cr> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<cr>"
    smap <expr><cr> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<cr>"
end
" }}}
" }}}
" Basic settings and status line {{{
set autoindent
set backspace=2
set clipboard=unnamed
set cmdheight=2
set completeopt+=noinsert
set completeopt-=preview
set conceallevel=2
set encoding=utf-8
set expandtab
set fileencoding=utf-8
set fileencodings=utf-8
set fileformat=unix
set formatoptions-=t
set hidden
set hlsearch
set ignorecase
set inccommand=split
set incsearch
set laststatus=2
set noruler
set noswapfile
set nowrap
set number
set scrolloff=10
set shiftwidth=4
set showcmd
set signcolumn=yes
set smartcase
set smartindent
set softtabstop=4
set t_Co=256
set tabstop=4
set textwidth=0

syntax on
colorscheme southernlights

hi Pmenu ctermfg=40 ctermbg=8
hi PmenuSel ctermbg=52
hi PmenuSbar ctermbg=4

hi EndingWhiteSpace ctermbg=52
match EndingWhiteSpace /\s\+\%#\@<!$/
" }}}
" maps {{{
let g:bash_ctrl_j='off'
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/usr/bin/python3'
let g:python3_host_skip_check = 1

let g:netrw_dirhistmax = 0

" open and source the vimrc file ev=edit vimrc sv=source vimrc
nnoremap <leader>ev :e ~/.dotfiles/.vim/vimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>q :bp\|bd #<cr>
nnoremap <c-l> <c-w>l
nnoremap <c-r> <c-w>r

nnoremap <a-h> <c-w>h
nnoremap <a-j> <c-w>j
nnoremap <a-k> <c-w>k
nnoremap <a-l> <c-w>l

nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap j gj
nnoremap k gk
nnoremap <down> 3jzz
nnoremap <up> 3kzz
nnoremap <leader>f gg=G
nnoremap <s-h> :bp<cr>
nnoremap <s-l> :bn<cr>

nnoremap <c-w>\| <c-w>v
nnoremap <c-w>- <c-w>s

inoremap jk <esc>

" Use C-o to go down the popup menu of deoplete
inoremap <expr> <C-d> pumvisible() ? "\<C-n>" : "\<C-d>"
inoremap <expr> <C-u> pumvisible() ? "\<C-p>" : "\<C-u>"
cnoremap <expr> <C-d> pumvisible() ? "\<C-n>" : "\<C-d>"
cnoremap <expr> <C-u> pumvisible() ? "\<C-p>" : "\<C-u>"

" Disable ctrl + Left/Right which deletes stuff
nnoremap <esc>[1;5D <nop>
nnoremap <esc>[1;5C <nop>
inoremap <esc>[1;5D <nop>
inoremap <esc>[1;5C <nop>
nnoremap <lt> <nop>
nnoremap > <nop>
nnoremap <c-r> <c-r>

nnoremap <F2> :call LanguageClient#textDocument_rename()<cr>


" Delete current selection to the black hole registry before pasting,
" keeping the currently pasted text instead of overwriting it.
vnoremap p "_dP

" key-mappings for comment line in normal mode tpope/vim-commentary
noremap  <silent> gc :Commentary<cr>

" save file with sudo permissions
:cmap w!! w !sudo tee %

" space to toggle folds.
nnoremap <space> za
vnoremap <space> za

autocmd TermOpen * set bufhidden=wipe
" }}}
" Vimscript file settings {{{
augroup FT_vim
    au!
    autocmd FileType vim let b:mycomment = "\""
    autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $HOME . '/.vim/vimrc' source $MYVIMRC
augroup END
" }}}
" Go file settings {{{
augroup FT_go
    au!
    autocmd FileType go nnoremap <leader>b :GoBuild <cr>
    autocmd FileType go nnoremap <leader>i :GoInstall <cr>
    autocmd FileType go nnoremap <leader>t :GoTest <cr>
    autocmd FileType go nnoremap <leader>c :GoCallers <cr>
    autocmd FileType go nnoremap <leader>r :GoReferrers <cr>
    " Set GOPATH to the folder above /src/ in full filepath
    autocmd FileType go nnoremap <leader>sgp :exe ":GoPath".split(expand("%:p"), "/src/")[0] <cr>
augroup END
" }}}
" Rust file settings {{{
augroup FT_rust
    au!
    autocmd FileType rust let g:deoplete#sources#rust#racer_binary = systemlist('which racer')[0]
    autocmd FileType rust let g:deoplete#sources#rust#rust_source_path = $HOME . '/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
    autocmd FileType rust nnoremap <leader>r :Crun <cr>
    autocmd FileType rust nnoremap <leader>b :Cbuild <cr>
    autocmd FileType rust nnoremap <leader>i :Cinstall <cr>
    autocmd FileType rust nnoremap <leader>t :Ctest <cr>
    autocmd FileType rust nnoremap <leader>bt :! RUST_BACKTRACE=1 cargo test <cr>
augroup END
" }}}
" Python file settings {{{
augroup FT_python
    au!
    autocmd FileType python set omnifunc=python3complete#Complete
augroup END
" }}}
" Json file settings {{{
augroup FT_python
    au!
    autocmd FileType json setlocal equalprg=python3\ -m\ json.tool
augroup END
"" }}}
