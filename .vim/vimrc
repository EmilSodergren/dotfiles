" leaders {{{
let mapleader=","
let maplocalleader="\\"
" }}}
" Plugins {{{
" Vim-plug {{{
let vimplug_exists=expand('~/.vim/autoload/plug.vim')
if !filereadable(vimplug_exists)
  if !executable("curl")
    echoerr "You have to install curl or first install vim-plug yourself!"
    execute "q!"
  endif
  echo "Installing Vim-Plug..."
  echo ""
  silent exec "!\curl -fLo " . vimplug_exists . " --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

call plug#begin(expand('~/.vim/plugged'))
Plug 'airblade/vim-gitgutter'
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'fatih/vim-go', {'for': 'go', 'do': ':GoInstallBinaries'}
Plug 'iamcco/markdown-preview.nvim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'lepture/vim-jinja', {'for': 'jinja'}
Plug 'machakann/vim-highlightedyank'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'racer-rust/vim-racer', {'for': 'rust'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'timonv/vim-cargo', {'for': 'rust'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-unimpaired'
Plug 'vimlab/split-term.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'w0rp/ale'
Plug 'Raimondi/delimitMate'

call plug#end()

filetype plugin indent on
" }}}
" Airline Plugin {{{
let g:airline_theme='dark'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_detect_modified=1
" }}}
" Fuzzy Finder Plugin {{{
nnoremap <leader>p :FZF<cr>
" Search Files
nnoremap <leader>sf :FZF<cr>
" Search Git
nnoremap <leader>sg :GFiles<cr>
" Search Lines
nnoremap <leader>sl :Lines<cr>
" }}}
" Git Gutter {{{
set updatetime=100
" }}}
" Go Plugins (vim-go) {{{
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
" }}}
" Highlighted yank {{{
let g:highlightedyank_highlight_duration = 1000
" }}}
" Markdown Plugins {{{
let g:vim_markdown_folding_disabled = 1
let g:tex_conceal = ""
let g:vim_markdown_math = 1
let g:vim_markdown_json_frontmatter = 1

let g:mkdp_browser = 'chromium'
let g:mkdp_auto_close = 0
" }}}
" Rust Plugins {{{
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1
" }}}
" Ultisnips {{{
let g:UltiSnipsSnippetDirectories = ['~/.vim/bundle/vim-snippets/UltiSnips/','~/.vim/bundle/vim-snippets/snippets/', '~/.vim/UltiSnips']
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="context"
" }}}
" }}}
" Basic settings and status line {{{
set autoindent
set backspace=2
set clipboard=unnamed
set cmdheight=2
set completeopt+=longest
set conceallevel=2
set encoding=utf-8
set expandtab
set fileencoding=utf-8
set fileencodings=utf-8
set fileformat=unix
set formatoptions-=t
set hidden
set hlsearch
set incsearch
set inccommand=split
set ignorecase
set laststatus=2
set noruler
set noswapfile
set nowrap
set number
set shiftwidth=4
set showcmd
set scrolloff=10
set smartcase
set smartindent
set softtabstop=4
set t_Co=256
set tabstop=4
set textwidth=0

syntax on
colorscheme southernlights
hi EndingWhiteSpace ctermbg=52

match EndingWhiteSpace /\s\+\%#\@<!$/
" }}}
" maps {{{
let g:bash_ctrl_j='off'
let g:python_host_prog='/usr/bin/python2'
let g:python3_host_prog='/usr/bin/python3'

" open and source the vimrc file ev=edit vimrc sv=source vimrc
nnoremap <leader>ev :e ~/.dotfiles/.vim/vimrc<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>q :bp\|bd #<cr>
nnoremap <c-l> <c-w>l
nnoremap <c-r> <c-w>r

nnoremap <a-h> <c-w>h
nnoremap <a-j> <c-w>j
nnoremap <a-k> <c-w>k
nnoremap <a-l> <c-w>l

nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap j gj
nnoremap k gk
nnoremap <down> 3jzz
nnoremap <up> 3kzz
nnoremap <leader>f gg=g
nnoremap <s-h> :bp<cr>
nnoremap <s-l> :bn<cr>

inoremap jk <esc>

" Disable ctrl + Left/Right which deletes stuff
nnoremap <esc>[1;5D <nop>
nnoremap <esc>[1;5C <nop>
inoremap <esc>[1;5D <nop>
inoremap <esc>[1;5C <nop>
nnoremap <lt> <nop>
nnoremap > <nop>
nnoremap <c-r> <c-r>

" Delete current selection to the black hole registry before pasting,
" keeping the currently pasted text instead of overwriting it.
vnoremap p "_dP

" key-mappings for comment line in normal mode tpope/vim-commentary
noremap  <silent> gc :Commentary<cr>

" save file with sudo permissions
:cmap w!! w !sudo tee %

" space to toggle folds.
nnoremap <space> za
vnoremap <space> za

" }}}
" Vimscript file settings {{{
augroup FT_vim
    au!
    autocmd FileType vim let b:mycomment = "\""
    autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END
" }}}
" Go file settings {{{
augroup FT_go
    au!
    autocmd FileType go nnoremap <leader>b :GoBuild <cr>
    autocmd FileType go nnoremap <leader>i :GoInstall <cr>
    autocmd FileType go nnoremap <leader>t :GoTest <cr>
    autocmd FileType go nnoremap <leader>c :GoCallers <cr>
    autocmd FileType go nnoremap <leader>r :GoReferrers <cr>
    " Set GOPATH to the folder above /src/ in full filepath
    autocmd FileType go nnoremap <leader>sgp :exe ":GoPath".split(expand("%:p"), "/src/")[0] <cr>
augroup END
" }}}
" Rust file settings {{{
augroup FT_rust
    au!
    autocmd FileType rust nnoremap <leader>r :Cargo run <cr>
    autocmd FileType rust nnoremap <leader>b :Cargo build <cr>
    autocmd FileType rust nnoremap <leader>i :Cargo install <cr>
    autocmd FileType rust nnoremap <leader>t :Cargo test <cr>
    autocmd FileType rust nnoremap <leader>bt :! RUST_BACKTRACE=1 cargo test <cr>
    autocmd FileType rust nnoremap gd :execute "normal \<Plug>(rust-def)" <cr>
    autocmd FileType rust nnoremap <leader>gd :execute "normal \<Plug>(rust-doc)" <cr>
augroup END
" }}}
" Python file settings {{{
augroup FT_python
    au!
    autocmd FileType python set omnifunc=python3complete#Complete
augroup END
" }}}
" Json file settings {{{
augroup FT_python
    au!
    autocmd FileType json setlocal equalprg=python3\ -m\ json.tool
augroup END
"" }}}
